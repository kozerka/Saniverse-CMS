---
import type { SanityDocument } from '@sanity/client';
import { loadQuery } from '@/sanity/lib/load-query';
import PortableText from '@/components/PortableText.astro';
import Layout from '@/layouts/Layout.astro';

export async function getStaticPaths() {
    const { data: posts } = await loadQuery<SanityDocument[]>({
        query: `*[_type == "post"]`,
    });

    return posts.map((post) => ({
        params: {
            slug: post.slug.current,
        },
    }));
}

const { params } = Astro;

const { data: post } = await loadQuery<{
    title: string;
    body: any[];
    author?: { name?: string; image?: { asset?: { url?: string } } };
    mainImage?: { asset?: { url?: string }; alt?: string };
    publishedAt?: string;
    categories?: Array<{ title?: string }>;
    tags?: string[];
}>({
    query: `*[_type == "post" && slug.current == $slug][0]{
        title,
        body,
        publishedAt,
        "author": author->{
            name,
            image{
                asset->{
                    url
                }
            }
        },
        mainImage{
            asset->{
                url
            },
            alt
        },
        categories[]->{
            title
        },
        tags
    }`,
    params: { slug: params.slug },
});

const authorName = post.author ? post.author.name : 'Unknown Author';
const publishedDate = post.publishedAt
    ? new Date(post.publishedAt).toLocaleDateString()
    : 'Unknown date';
---

<Layout title={post.title}>
    <article class="container mt-32 w-full max-w-[900px] mx-auto text-left">
        {
            post.mainImage?.asset?.url && (
                <img
                    src={post.mainImage.asset.url}
                    alt={post.mainImage.alt ?? ''}
                    class="w-full h-auto rounded-lg mb-6 shadow-md"
                />
            )
        }
        <h1 class="text-4xl font-bold mb-4">{post.title}</h1>

        {
            post.categories && post.categories.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                    {post.categories.map((cat) => (
                        <span class="px-4 py-1 bg-blue-600 text-white rounded-full text-sm shadow">
                            {cat.title}
                        </span>
                    ))}
                </div>
            )
        }

        {
            post.tags && post.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-6">
                    {post.tags.map((tag) => (
                        <span class="px-3 py-1 bg-gray-200 rounded-full text-sm text-gray-700">
                            #{tag}
                        </span>
                    ))}
                </div>
            )
        }
        <article
            class="prose dark:prose-invert max-w-none text-p1 portable mx-auto w-full"
        >
            <PortableText portableText={post.body} />
        </article>

        <p class="mt-6 text-sm text-p4">
            by <strong>{authorName}</strong> on {publishedDate}.
        </p>
    </article>
</Layout>

<style>
    .portable {
        code {
            background-color: #00bbff;
            padding: 0.2em 0.4em;
            border-radius: 0.3em;
        }

        blockquote {
            color: white;
            border-left: 4px solid #ffa500;
            padding-left: 1em;
        }

        img {
            border-radius: 8px;
        }
        strong {
            color: #c8e3ed;
            padding-right: 4px;
        }
    }
</style>
